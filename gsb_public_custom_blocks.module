<?php

/**
 * Implements hook_theme().
 *
 * Define custom theme hooks
 */
function gsb_public_custom_blocks_theme($existing, $type , $theme, $path) {

  return array(
    'gsb_public_custom_blocks_insights' => array(
      'template' => 'insights/templates/gsb-public-custom-blocks-insights',
      'file' => 'insights/insights.theme.inc',
    ),
    'gsb_public_custom_blocks_mobile_insights' => array(
      'template' => 'mobile_insights/templates/gsb-public-custom-blocks-mobile-insights',
      'file' => 'mobile_insights/mobile-insights.theme.inc',
    ),
    'gsb_public_custom_blocks_insights_search' => array(
      'template' => 'insights_search/templates/gsb-public-custom-blocks-insights-search',
      'file' => 'insights_search/insights_search.theme.inc',
    ),
    'gsb_public_custom_blocks_map_link' => array(
      'variables' => array('text' => ''),
      'template' => 'map_link/templates/gsb-public-custom-blocks-map-link',
      'file' => 'map_link/map_link.theme.inc',
    ),
    'gsb_public_custom_blocks_follow_us' => array(
      'template' => 'follow_us/templates/gsb-public-custom-blocks-follow-us',
      'file' => 'follow_us/follow_us.theme.inc',
    ),
    'gsb_public_custom_blocks_enews_signup' => array(
      'template' => 'enews_signup/templates/gsb-public-custom-blocks-enews-signup',
      'file' => 'enews_signup/enews_signup.theme.inc',
    ),
    'gsb_public_custom_blocks_weather_widget' => array(
      'template' => 'weather/templates/gsb-public-custom-blocks-weather',
      'file' => 'weather/weather.theme.inc',
    ),
    'gsb_public_custom_blocks_conducting_research' => array(
      'template' => 'conducting_research/templates/gsb-public-custom-blocks-conducting-research',
      'file' => 'conducting_research/conducting_research.theme.inc',
    ),
    'gsb_public_custom_blocks_exec_ed' => array(
      'template' => 'exec_ed/templates/gsb-public-custom-blocks-exec_ed',
      'file' => 'exec_ed/exec_ed.theme.inc',
    ),
    'gsb_public_custom_blocks_stay_informed' => array(
      'template' => 'exec_ed/templates/gsb-public-custom-blocks-stay_informed',
      'file' => 'exec_ed/exec_ed.theme.inc',
    ),
    'gsb_public_custom_blocks_mini_program_finder' => array(
      'template' => 'exec_ed/templates/gsb-public-custom-blocks-mini_program_finder',
      'file' => 'exec_ed/exec_ed.theme.inc',
    ),
    'gsb_public_custom_blocks_need_more_information' => array(
      'template' => 'application_finder/templates/gsb-public-custom-blocks-need_more_information',
      'file' => 'application_finder/application_finder.theme.inc',
    ),
    'gsb_public_custom_blocks_seed' => array(
      'template' => 'seed/templates/gsb-public-custom-blocks-seed',
      'file' => 'seed/seed.theme.inc',
    ),
    'gsb_public_custom_blocks_seed_stay_informed' => array(
      'template' => 'seed/templates/gsb-public-custom-blocks-seed_stay_informed',
      'file' => 'seed/seed.theme.inc',
    ),
    'gsb_public_custom_blocks_degree_programs' => array(
      'template' => 'degree_programs/templates/gsb-public-custom-blocks-degree_programs',
      'file' => 'degree_programs/degree_programs.theme.inc',
    ),
    'gsb_public_custom_blocks_hero_region' => array(
      'template' => 'hero_region/templates/gsb-public-custom-blocks-hero_region',
      'file' => 'hero_region/hero_region.theme.inc',
    ),
  );
}

/**
 * Implement hook_menu().
 */
function gsb_public_custom_blocks_menu() {
  $items = array();

  $items['vmock-signup'] = array(
    'page callback' => 'gsb_public_custom_blocks_vmock_signup',
    'access callback' => 'user_is_logged_in',
  );

  return $items;
}

function gsb_public_custom_blocks_vmock_signup() {

  if (empty($_GET['email']) || !valid_email_address($_GET['email'])) {
    drupal_set_message(t('Enter a valid email address'), 'error');
    drupal_goto($_SERVER['HTTP_REFERER']);
  }

  include_once('../library/VmockUrlGenerator/VmockUrlGenerator.php');

  $activationKey = variable_get('vmock_activation_key', '');
  if ($activationKey = variable_get('vmock_activation_key', '')) {
    /* create an object */
    $urlGenerator = new VmockUrlGenerator($activationKey);

    /* add params (as applicable) */
    $urlGenerator->addParam('email', $_GET['email']);

    /* get encoded url & embed the above generated url in your webpage (the portal) */
    $url = $urlGenerator->getUrl();

    drupal_goto($url);
  }
  else {
    drupal_set_message(t('Invalid Activation Key'), 'error');
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
}

/**
 * Implementation of hook_block_info()
 *
 */
function gsb_public_custom_blocks_block_info() {
  return array(
    'gpcb_insights' => array(
      'info' => t('Insights by Stanford'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_mobile_insights' => array(
      'info' => t('Mobile Insights'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_insights_search' => array(
      'info' => t('Insights Search'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_follow_us' => array(
      'info' => t('Custom CTA: Follow Us'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_enews_signup' => array(
      'info' => t('Custom CTA: eNews Signup'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_banner_tagline' => array(
      'info' => t('Banner tagline'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_banner_title' => array(
      'info' => t('Banner title'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_last_updated' => array(
      'info' => t('MBA: Last Updated'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gsb_featured_event' => array(
      'info' => t('Events: Featured Event'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_weather_widget' => array(
      'info' => t('TSE: Weather'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_conducting_research' => array(
      'info' => t('Custom CTA: Conducting Research'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_exec_ed' => array(
      'info' => t('Exec Ed title'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_stay_informed' => array(
      'info' => t('Custom CTA: Executive Education Home - Subscribe'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_seed' => array(
      'info' => t('Seed title'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_seed_stay_informed' => array(
      'info' => t('Custom CTA: Seed Home - Subscribe'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_hero_region' => array(
      'info' => t('Hero Region'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'gpcb_need_more_information' => array(
      'info' => t('Need More Information'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
}

/**
 * Implementation of hook_block_view
 *
 * Define callbacks for block display
 *
 */
function gsb_public_custom_blocks_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'gpcb_insights':
      $block['content'] = theme('gsb_public_custom_blocks_insights');
      break;
    case 'gpcb_mobile_insights':
      $block['content'] = theme('gsb_public_custom_blocks_mobile_insights');
      break;
    case 'gpcb_insights_search':
      $block['content'] = theme('gsb_public_custom_blocks_insights_search');
      break;
    case 'gpcb_exec_ed':
      $block['content'] = theme('gsb_public_custom_blocks_exec_ed');
      break;
    case 'gpcb_seed':
      $block['content'] = theme('gsb_public_custom_blocks_seed');
      break;
    case 'gpcb_seed_stay_informed':
      $block['content'] = theme('gsb_public_custom_blocks_seed_stay_informed');
      break;
    case 'gpcb_stay_informed':
      $block['content'] = theme('gsb_public_custom_blocks_stay_informed');
      break;
    case 'gpcb_follow_us':
      $block['content'] = theme('gsb_public_custom_blocks_follow_us');
      break;
    case 'gpcb_enews_signup':
      $block['content'] = theme('gsb_public_custom_blocks_enews_signup');
      break;
    case 'gpcb_weather_widget':
      $block['content'] = theme('gsb_public_custom_blocks_weather_widget');
      break;
    case 'gpcb_hero_region':
      $block['content'] = theme('gsb_public_custom_blocks_hero_region');
      break;
    case 'gpcb_banner_tagline':
      $block['content']['tagline'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'banner-subtitle',
          ),
        ),
        '#children' => variable_get('gpcb_banner_tagline_value', ''),
      );
      break;

    case 'gpcb_banner_title':
      $args = explode('/', trim(request_uri(), '/'));
      $title = _gsb_public_custom_blocks_get_banner_title($args);
      $block['content']['title'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'banner-title',
          ),
        ),
        '#children' => $title,
      );
      break;
    case 'gpcb_last_updated':
      $node = menu_get_object('node');
      if (!empty($node)) {
        $last_updated_date = format_date($node->changed, 'custom', 'j M Y');
        $block['content'] = '<b>Last Updated</b> ' . $last_updated_date;
      }
      break;
    case 'gpcb_conducting_research':
      $block['content'] = theme('gsb_public_custom_blocks_conducting_research');
      break;
    case 'gpcb_need_more_information':
      $block['content'] = gsb_public_custom_blocks_need_more_information_content_type();
      break;
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function gsb_public_custom_blocks_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'gpcb_banner_tagline':
      $form['gpcb_banner_tagline_value'] = array(
        '#type' => 'textfield',
        '#title' => t('Banner tagline text'),
        '#default_value' => variable_get('gpcb_banner_tagline_value', ''),
      );
      break;
    case 'gpcb_need_more_information':
      for ($count = 1; $count <= 4; $count++) {
        $title = 'gpcb_need_more_information_cta_title_' . $count;
        $url = 'gpcb_need_more_information_cta_url_' . $count;
        $form[$title] = array(
          '#title' => t('CTA Title '. $count),
          '#type' => 'textfield',
          '#default_value' => variable_get($title, ''),
          '#required' => true,
          '#element_validate' => array('gsb_public_custom_blocks_need_more_information_validate_title'),
        );
        $form[$url] = array(
          '#title' => t('CTA URL ' . $count),
          '#type' => 'textfield',
          '#default_value' => variable_get($url, ''),
          '#required' => true,
          '#element_validate' => array('gsb_public_custom_blocks_need_more_information_validate_url'),
        );
      }
      break;
  }
  return $form;
}

/**
 * Validates the cta title for need_more_information
 */
function gsb_public_custom_blocks_need_more_information_validate_title($element, &$element_state) {
  $element_name = $element['#name'];
  if (empty($element['#value'])) {
    form_set_error($element_name, t($element['#title'] . ' is required.'));
  }
}

/**
 * Validates the cta url for need_more_information
 */
function gsb_public_custom_blocks_need_more_information_validate_url($element, &$element_state) {
  $element_name = $element['#name'];
  if (empty($element['#value'])) {
    form_set_error($element_name, t($element['#title'] . ' is required.'));
  }
}

/**
 * Implements hook_block_save().
 */
function gsb_public_custom_blocks_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'gpcb_banner_tagline':
      variable_set('gpcb_banner_tagline_value', $edit['gpcb_banner_tagline_value']);
      break;
    case 'gpcb_need_more_information':
      for ($count = 1; $count <= 4; $count++) {
        $title = 'gpcb_need_more_information_cta_title_' . $count;
        $url = 'gpcb_need_more_information_cta_url_' . $count;
        variable_set($title, $edit[$title]);
        variable_set($url, $edit[$url]);
      }
      break;
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function gsb_public_custom_blocks_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return "plugins/$plugin_type";
  }
}

/**
 * Helper function that generates render array for vertical tabs
 */
function _gsb_public_custom_blocks_generate_tabs($tabs) {
  $content['#groups']['group_tabs'] = new stdClass();
  $content['#groups']['group_tabs']->group_name = 'group';
  $content['#groups']['group_tabs']->format_type = 'tabs';
  $content['#pre_render'][] = 'field_group_form_pre_render';
  $content['#entity_type'] = 'block';
  $content['#bundle'] = 'tabs';
  $content['#groups']['group_tabs']->weight = 0;

  foreach ($tabs as $key => $val) {
    $group = 'group_tab' . $key;
    $content['#groups'][$group] = new stdClass();
    $content['#groups'][$group]->group_name = $key;
    $content['#groups'][$group]->format_type = 'tab';
    $content['#groups'][$group]->format_settings['formatter'] = 'closed';
    $content['#groups'][$group]->format_settings['instance_settings']['classes'] = 'resp-tab-content';
    $content['#groups'][$group]->children[] = $group;
    $content['#groups'][$group]->label = $val['title'];
    $content['#groups'][$group]->weight = (int)$key;
    $content['#groups']['group_tabs']->children[] = $group;
    $content['#group_children'][$group] = 'group_tabs';
    $content['#group_children'][$key] = $group;
    $content[$key] = $tabs[$key];
  }
  $content['#fieldgroups'] = $content['#groups'];
  return $content;
}

function gsb_public_custom_blocks_gsb_fpp_customizations_icons_alter(&$icons) {
  $module_path = drupal_get_path('module', 'gsb_public_custom_blocks');
  $icons_settings = array(
    'homepage_social_feed:homepage_social_feed' => 'homepage_social_feed.png',
    'lastname_az_links:lastname_az_links' => 'lastname_az_links.png',
    'media_toolkit:media_toolkit' => 'media_toolkit.png',
    'program_finder:program_finder' => 'program_finder.png',
    'program_links:program_links' => 'program_links.png',
    'salesform_webform:salesform_webform' => 'salesform_webform.png',
    'block:gsb_public_custom_blocks-gpcb_follow_us' => 'follow-us.jpg',
    'block:gsb_public_custom_blocks-gpcb_insights' => 'insights.jpg',
    'block:gsb_public_custom_blocks-gpcb_mobile_insights' => 'mobile-insights.jpg',
    'block:gsb_public_custom_blocks-gpcb_insights_search' => 'insights-search.jpg',
    'block:gsb_public_custom_blocks-gpcb_weather_widget' => 'weather-widget.jpg',
    'block:gsb_public_custom_blocks-gpcb_conducting_research' => 'library-conducting-research.png',
  );
  foreach($icons_settings as $key => $value) {
    if (isset($icons[$key]['icon'])) {
      $icons[$key]['icon'] = $module_path . '/images/' . $value;
    }
  }
}

function _gsb_public_custom_blocks_get_banner_title($args) {
  // Get the alias for the current path.
  $current_path = drupal_get_path_alias(current_path());
  // Looping through our path map, see if the current path matches any.
  foreach (gsb_custom_section_title_get_sections() as $map) {
    if (drupal_match_path($current_path, $map['paths'])) {
      return !empty($map['link']) ? l($map['title'], $map['link_path']) : $map['title'];
    }
  }

  // try to get the menu name from the active trail

  $active_trail = menu_get_active_trail();
  $trail_length = count($active_trail);

  $menu_name = '';
  if (isset($active_trail[$trail_length-1]['menu_name'])) {
    $menu_name = $active_trail[$trail_length-1]['menu_name'];
  }

  $title = $active_trail[$trail_length-1]['title'];

  // check whether the page is associated with a menu
  // if so, we can use the section id (a workbench taxonomy term id)
  // to look up the program name.

  $pos = strpos($menu_name, 'section-');
  if ($pos !== false) {

    $pos = strpos($menu_name, '-');
    $tid = substr($menu_name, $pos+1);
    $term = taxonomy_term_load($tid);
    if ($term) {
      $title = $term->name;
    }

  } else {

    // if there is no menu, then we are forced to
    // hard-code things - based on the url path

    // not pretty, but so far we haven't been
    // able to find a better approach

    $programs_page = false;
    $stanford_gsb_experience_page = false;

    $first_path_item = $args[0];

    if ($first_path_item == 'programs') {
      if ($args[1] == 'mba') {
        $title = 'MBA Program';
      } elseif ($args[1] == 'msx') {
        $title = 'MSx Program';
      }
    } elseif ($first_path_item == 'stanford-gsb-experience') {
      $title = 'Stanford GSB Experience';
    }

  }

  return $title;
}

/**
 * 'Edit form' callback for the content type.
 */
function gsb_public_custom_blocks_need_more_information_edit_form($form, &$form_state) {
  $conf = $form_state['conf'];
  $form['override_title']['#access'] = FALSE;
  $form['override_title_text']['#access'] = FALSE;
  $form['override_title_heading']['#access'] = FALSE;
  for ($count = 1; $count <= 4; $count++) {
    $title = 'cta_title_' . $count;
    $url = 'cta_url_' . $count;
    $form[$title] = array(
      '#title' => t('CTA Title '. $count),
      '#type' => 'textfield',
      '#default_value' => !empty($conf[$title]) ? $conf[$title] : '',
    );
    $form[$url] = array(
      '#title' => t('CTA URL ' . $count),
      '#type' => 'textfield',
      '#default_value' => !empty($conf[$url]) ? $conf[$url] : '',
    );
  }

  $form['#validate'][] = 'gsb_public_custom_blocks_need_more_information_edit_form_validate';
  return $form;
}

function gsb_public_custom_blocks_need_more_information_edit_form_validate($form, $form_state) {
  for ($num = 1; $num <= 4; $num++) {
    if ($form_state['values']['cta_title_' . $num] != '' && $form_state['values']['cta_url_' . $num] == '') {
      form_set_error('cta_url_' . $num, t('CTA Url ' . $num . ' is required.'));
    }
    if ($form_state['values']['cta_title_' . $num] == '' && $form_state['values']['cta_url_' . $num] != '') {
      form_set_error('cta_title_' . $num, t('CTA title ' . $num . ' is required.'));
    }
  }
}
/**
 * The submit form stores the data in $conf.
 */
function gsb_public_custom_blocks_need_more_information_edit_form_submit($form, $form_state) {
  $tc = 0;
  $tu = 0;
  foreach (array_keys($form_state['values']) as $key) {
    if (isset($form_state['values'][$key])) {
      $form_state['conf'][$key] = $form_state['values'][$key];
      if (substr($key,0,9) == 'cta_title'){
        $form_state['conf']['cta'][$tc]['title'] = $form_state['values'][$key];
        $tc++;
      }
      if (substr($key,0,7) == 'cta_url'){
        $form_state['conf']['cta'][$tu]['url'] = $form_state['values'][$key];
        $tu++;
      }
    }
  }
}

/**
 * 'Edit form' callback for the mini program finder .
 */
function gsb_public_custom_blocks_mini_program_finder_edit_form($form, &$form_state) {
  $conf = $form_state['conf'];
  $form['override_title']['#access'] = FALSE;
  $form['override_title_text']['#access'] = FALSE;
  $form['override_title_heading']['#access'] = FALSE;
  $form['finder_image'] = array(
    '#title' => t('Upload Finder image'),
    '#type' => 'managed_file',
    '#required' => TRUE,
    '#default_value' => (isset($conf['finder_image']->fid) ? $conf['finder_image']->fid : ''),
    '#upload_validators' => array(
      'file_validate_extensions' => array('gif png jpg jpeg'),
    ),
    '#upload_location' => 'public://minifinderimages/',
  );
  return $form;
}

/**
 * The submit form stores the data in $conf.
 */
function gsb_public_custom_blocks_mini_program_finder_edit_form_submit($form, $form_state) {
  $values = &$form_state['values'];
  $file = file_load($values['finder_image']);
  if ($file) {
    file_save($file);
    file_usage_add($file, 'image', 'default_image', $file->fid);
    $form_state['conf']['finder_image'] = $file;
  }
}

//mini program finder form
function gsb_public_custom_blocks_forms($form_id, $args) {
  $forms['mini_program_finder'] = array(
    'callback' => 'mini_program_finder_form',
    'callback arguments' => $args,
  );
  return $forms;
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function mini_program_finder_form($form, &$form_state) {
  $form['filters'] = array(
    '#type' => 'container',
  );
  $form['filters']['program_topic'] = array(
    '#type' => 'select',
    '#title' => t('Topics'),
    '#options' => $form_state['topic_filters'],
    '#attributes' => array(
      'class' => array('isotopify-multiple','isotopify-filter-checkboxes'),
    ),
    '#multiple' => true,
    '#default_value' => !empty($form_state['values']['program_topics']) ? $form_state['values']['program_topics'] : '',
  );
  $form['filters']['date_range'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('isotopify-filter-daterange'),
      'data-title' => t('Select Date Range'),
    ),
    'date_range_from' => array(
      '#type' => 'textfield',
      '#title' => t('Start Date'),
      '#default_value' => !empty($form_state['values']['date_range_from']) ? $form_state['values']['date_range_from'] : '',
      '#attributes' => array(
        'class' => array('date-range-field'),
      ),
    ),
    'date_range_to' => array(
      '#type' => 'textfield',
      '#title' => t('End Date'),
      '#default_value' => !empty($form_state['values']['date_range_to']) ? $form_state['values']['date_range_to'] : '',
      '#attributes' => array(
        'class' => array('date-range-field'),
      ),
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
  );

  $form['#submit'][] = 'mini_program_finder_submit';
  drupal_add_js(libraries_get_path('multiple-select') . '/jquery.multiple.select.js');
  drupal_add_css(libraries_get_path('multiple-select') . '/multiple-select.css');
  drupal_add_js(drupal_get_path('module', 'gsb_public_custom_blocks') . '/js/mini_program_finder.js');
  drupal_add_js(libraries_get_path('moment') . '/moment.js');
  drupal_add_js(libraries_get_path('jquery-date-range-picker') . '/dist/jquery.daterangepicker.js');
  drupal_add_css(libraries_get_path('jquery-date-range-picker') . '/dist/daterangepicker.css');
  return $form;
}

function mini_finder_render($topic_options) {
  $form_state = array('method' => 'get', 'topic_filters' => $topic_options, 'redirect' => '/exec-ed/programs');
  $form = drupal_build_form('mini_program_finder', $form_state);
  unset($form['form_build_id']);
  $parameters['filters'] = drupal_render($form);
  $output = $parameters['filters'];

  return $output;
}

function mini_program_finder_submit($form, $form_state) {
  $values = implode(',', $form_state['values']['program_topic']);
  $start_date = $form_state['values']['date_range_from'];
  $end_date = $form_state['values']['date_range_to'];
  $query = array();

  if (!empty($values)) {
    $query['program-topic'] = $values;
  }
  if(!empty($start_date) && !empty($end_date)) {
    $query['date-range-from'] = $start_date;
    $query['date-range-to'] = $end_date;
  }

  $options = array('absolute' => TRUE, 'query' => $query);
  drupal_goto('/exec-ed/programs', $options);
}

function gsb_public_custom_blocks_need_more_information_content_type() {
  $cta_values = array();
  for ($count = 1; $count <= 4; $count++) {
    $title = 'gpcb_need_more_information_cta_title_' . $count;
    $url = 'gpcb_need_more_information_cta_url_' . $count;
    $cta_values[] = array(
      'title' => variable_get($title, ''),
      'url' => variable_get($url, '')
    );
  }
  $cta = array('cta' => $cta_values);
  $output = theme('gsb_public_custom_blocks_need_more_information', $cta);
  return $output;
}
